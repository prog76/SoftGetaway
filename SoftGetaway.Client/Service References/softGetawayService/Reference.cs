//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace softGetawayClient.softGetawayService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConnectionSettings", Namespace="http://schemas.datacontract.org/2004/07/softGetawayHost")]
    [System.SerializableAttribute()]
    public partial class ConnectionSettings : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MaxPeerCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SSIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MaxPeerCount {
            get {
                return this.MaxPeerCountField;
            }
            set {
                if ((this.MaxPeerCountField.Equals(value) != true)) {
                    this.MaxPeerCountField = value;
                    this.RaisePropertyChanged("MaxPeerCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SSID {
            get {
                return this.SSIDField;
            }
            set {
                if ((object.ReferenceEquals(this.SSIDField, value) != true)) {
                    this.SSIDField = value;
                    this.RaisePropertyChanged("SSID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SharableConnection", Namespace="http://schemas.datacontract.org/2004/07/softGetawayHost")]
    [System.SerializableAttribute()]
    public partial class SharableConnection : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DeviceNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GuidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DeviceName {
            get {
                return this.DeviceNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DeviceNameField, value) != true)) {
                    this.DeviceNameField = value;
                    this.RaisePropertyChanged("DeviceName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Guid {
            get {
                return this.GuidField;
            }
            set {
                if ((object.ReferenceEquals(this.GuidField, value) != true)) {
                    this.GuidField = value;
                    this.RaisePropertyChanged("Guid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NetworkPeerService", Namespace="http://schemas.datacontract.org/2004/07/softGetawayHost")]
    [System.SerializableAttribute()]
    public partial class NetworkPeerService : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool isActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool isSetHostNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool isSetIPField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private softGetawayClient.softGetawayService.NetworkPeerStorage storageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private softGetawayClient.softGetawayService.NetworkPeerType typeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool isActive {
            get {
                return this.isActiveField;
            }
            set {
                if ((this.isActiveField.Equals(value) != true)) {
                    this.isActiveField = value;
                    this.RaisePropertyChanged("isActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool isSetHostName {
            get {
                return this.isSetHostNameField;
            }
            set {
                if ((this.isSetHostNameField.Equals(value) != true)) {
                    this.isSetHostNameField = value;
                    this.RaisePropertyChanged("isSetHostName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool isSetIP {
            get {
                return this.isSetIPField;
            }
            set {
                if ((this.isSetIPField.Equals(value) != true)) {
                    this.isSetIPField = value;
                    this.RaisePropertyChanged("isSetIP");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public softGetawayClient.softGetawayService.NetworkPeerStorage storage {
            get {
                return this.storageField;
            }
            set {
                if ((object.ReferenceEquals(this.storageField, value) != true)) {
                    this.storageField = value;
                    this.RaisePropertyChanged("storage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public softGetawayClient.softGetawayService.NetworkPeerType type {
            get {
                return this.typeField;
            }
            set {
                if ((this.typeField.Equals(value) != true)) {
                    this.typeField = value;
                    this.RaisePropertyChanged("type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NetworkPeerStorage", Namespace="http://schemas.datacontract.org/2004/07/softGetawayHost")]
    [System.SerializableAttribute()]
    public partial class NetworkPeerStorage : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HostNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IPAddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MACAddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string iconFileField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HostName {
            get {
                return this.HostNameField;
            }
            set {
                if ((object.ReferenceEquals(this.HostNameField, value) != true)) {
                    this.HostNameField = value;
                    this.RaisePropertyChanged("HostName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IPAddress {
            get {
                return this.IPAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.IPAddressField, value) != true)) {
                    this.IPAddressField = value;
                    this.RaisePropertyChanged("IPAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MACAddress {
            get {
                return this.MACAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.MACAddressField, value) != true)) {
                    this.MACAddressField = value;
                    this.RaisePropertyChanged("MACAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string iconFile {
            get {
                return this.iconFileField;
            }
            set {
                if ((object.ReferenceEquals(this.iconFileField, value) != true)) {
                    this.iconFileField = value;
                    this.RaisePropertyChanged("iconFile");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NetworkPeerType", Namespace="http://schemas.datacontract.org/2004/07/softGetawayHost")]
    public enum NetworkPeerType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WiFi = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Ethernet = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Bluetooth = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="getawayState", Namespace="http://schemas.datacontract.org/2004/07/softGetawayHost")]
    public enum getawayState : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Idle = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Initialization = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Starting = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        StartFailed = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Started = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Stopping = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        StopFailed = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Stopped = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        StartingIP = 8,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://softGetaway", ConfigurationName="softGetawayService.ISoftGetawayHost")]
    public interface ISoftGetawayHost {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://softGetaway/ISoftGetawayHost/IsShouldStart", ReplyAction="http://softGetaway/ISoftGetawayHost/IsShouldStartResponse")]
        bool IsShouldStart();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://softGetaway/ISoftGetawayHost/Start", ReplyAction="http://softGetaway/ISoftGetawayHost/StartResponse")]
        void Start(string sharedConnectionGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://softGetaway/ISoftGetawayHost/Stop", ReplyAction="http://softGetaway/ISoftGetawayHost/StopResponse")]
        void Stop();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://softGetaway/ISoftGetawayHost/SetPrivateConnectionSettings", ReplyAction="http://softGetaway/ISoftGetawayHost/SetPrivateConnectionSettingsResponse")]
        bool SetPrivateConnectionSettings(softGetawayClient.softGetawayService.ConnectionSettings settings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://softGetaway/ISoftGetawayHost/GetPrivateConnectionSettings", ReplyAction="http://softGetaway/ISoftGetawayHost/GetPrivateConnectionSettingsResponse")]
        softGetawayClient.softGetawayService.ConnectionSettings GetPrivateConnectionSettings();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://softGetaway/ISoftGetawayHost/GetSharableConnections", ReplyAction="http://softGetaway/ISoftGetawayHost/GetSharableConnectionsResponse")]
        softGetawayClient.softGetawayService.SharableConnection[] GetSharableConnections();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://softGetaway/ISoftGetawayHost/GetSharedConnection", ReplyAction="http://softGetaway/ISoftGetawayHost/GetSharedConnectionResponse")]
        string GetSharedConnection();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://softGetaway/ISoftGetawayHost/GetPeers", ReplyAction="http://softGetaway/ISoftGetawayHost/GetPeersResponse")]
        softGetawayClient.softGetawayService.NetworkPeerService[] GetPeers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://softGetaway/ISoftGetawayHost/GetTraceLines", ReplyAction="http://softGetaway/ISoftGetawayHost/GetTraceLinesResponse")]
        string[] GetTraceLines();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://softGetaway/ISoftGetawayHost/SetPeer", ReplyAction="http://softGetaway/ISoftGetawayHost/SetPeerResponse")]
        void SetPeer(softGetawayClient.softGetawayService.NetworkPeerService peer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://softGetaway/ISoftGetawayHost/SetIP", ReplyAction="http://softGetaway/ISoftGetawayHost/SetIPResponse")]
        bool SetIP(string ip);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://softGetaway/ISoftGetawayHost/GetIP", ReplyAction="http://softGetaway/ISoftGetawayHost/GetIPResponse")]
        string GetIP();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://softGetaway/ISoftGetawayHost/LoadConfig", ReplyAction="http://softGetaway/ISoftGetawayHost/LoadConfigResponse")]
        void LoadConfig();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://softGetaway/ISoftGetawayHost/SaveConfig", ReplyAction="http://softGetaway/ISoftGetawayHost/SaveConfigResponse")]
        void SaveConfig();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://softGetaway/ISoftGetawayHost/GetState", ReplyAction="http://softGetaway/ISoftGetawayHost/GetStateResponse")]
        softGetawayClient.softGetawayService.getawayState GetState();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISoftGetawayHostChannel : softGetawayClient.softGetawayService.ISoftGetawayHost, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SoftGetawayHostClient : System.ServiceModel.ClientBase<softGetawayClient.softGetawayService.ISoftGetawayHost>, softGetawayClient.softGetawayService.ISoftGetawayHost {
        
        public SoftGetawayHostClient() {
        }
        
        public SoftGetawayHostClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SoftGetawayHostClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SoftGetawayHostClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SoftGetawayHostClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool IsShouldStart() {
            return base.Channel.IsShouldStart();
        }
        
        public void Start(string sharedConnectionGuid) {
            base.Channel.Start(sharedConnectionGuid);
        }
        
        public void Stop() {
            base.Channel.Stop();
        }
        
        public bool SetPrivateConnectionSettings(softGetawayClient.softGetawayService.ConnectionSettings settings) {
            return base.Channel.SetPrivateConnectionSettings(settings);
        }
        
        public softGetawayClient.softGetawayService.ConnectionSettings GetPrivateConnectionSettings() {
            return base.Channel.GetPrivateConnectionSettings();
        }
        
        public softGetawayClient.softGetawayService.SharableConnection[] GetSharableConnections() {
            return base.Channel.GetSharableConnections();
        }
        
        public string GetSharedConnection() {
            return base.Channel.GetSharedConnection();
        }
        
        public softGetawayClient.softGetawayService.NetworkPeerService[] GetPeers() {
            return base.Channel.GetPeers();
        }
        
        public string[] GetTraceLines() {
            return base.Channel.GetTraceLines();
        }
        
        public void SetPeer(softGetawayClient.softGetawayService.NetworkPeerService peer) {
            base.Channel.SetPeer(peer);
        }
        
        public bool SetIP(string ip) {
            return base.Channel.SetIP(ip);
        }
        
        public string GetIP() {
            return base.Channel.GetIP();
        }
        
        public void LoadConfig() {
            base.Channel.LoadConfig();
        }
        
        public void SaveConfig() {
            base.Channel.SaveConfig();
        }
        
        public softGetawayClient.softGetawayService.getawayState GetState() {
            return base.Channel.GetState();
        }
    }
}
